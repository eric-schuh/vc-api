openapi: 3.0.0
info:
  version: 0.0.3-unstable
  title: VC Exchanges and Workflows API
  description: >-
    This is an Experimental Open API Specification for the [VC Data
    Model](https://www.w3.org/TR/vc-data-model/).
  license:
    name: W3C Software and Document License
    url: http://www.w3.org/Consortium/Legal/copyright-software.
  contact:
    name: GitHub Source Code
    url: https://github.com/w3c-ccg/vc-api
servers:
  - url: https://verifier.qa.veres.app/verifiers/z1A45ZhWEGMeibHrB15nv8Gk6
    description: Veres Verifier (Quality Assurance)
  - url: https://issuer.qa.veres.app/issuers/z19mTE4x8KHRaQLgdoYwsfPnU
    description: Veres Issuer (Quality Assurance)
tags:
  - name: exchanges_Credentials
    x-displayName: Credentials
  - name: exchanges_Exchanges
    x-displayName: Exchanges
  - name: holder_Credentials
    x-displayName: Credentials
  - name: holder_Presentations
    x-displayName: Presentations
  - name: holder_Exchanges
    x-displayName: Exchanges
  - name: issuer_Credentials
    x-displayName: Credentials
  - name: verifier_Credentials
    x-displayName: Credentials
  - name: verifier_Presentations
    x-displayName: Presentations
  - name: verifier_other
    x-displayName: other
paths:
  /workflows:
    post:
      summary: >-
        Creates a new workflow and returns location of workflow metadata in a
        response header.
      tags:
        - exchanges_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: createWorkflow
      description: >-
        Creates a new workflow and returns location of workflow metadata in a
        response header.
      x-expectedCaller: Administrators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowRequest'
      responses:
        '201':
          description: Workflow successfully created (with data)
          headers:
            Location:
              schema:
                type: string
                format: uri
                description: The HTTP URL used to retrieve workflow metadata.
                example: https://issuer.example.com/workflows/123
        '204':
          description: Workflow successfully created (without data)
          headers:
            Location:
              schema:
                type: string
                format: uri
                description: The HTTP URL used to retrieve workflow metadata.
                example: https://issuer.example.com/workflows/123
        '400':
          description: Invalid input
        '401':
          description: Not Authorized
        '500':
          description: Internal Error
  /workflows/{localWorkflowId}:
    get:
      summary: >-
        Gets the configuration of an existing workflow and returns it in the
        response body.
      tags:
        - exchanges_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: getWorkflowConfiguration
      description: >-
        Gets the configuration of an existing workflow and returns it in the
        response body.
      x-expectedCaller: Administrators
      parameters:
        - $ref: '#/components/parameters/LocalWorkflowId'
      responses:
        '200':
          description: Workflow configuration retrieved!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowResponse'
        '400':
          description: Invalid input
        '401':
          description: Not Authorized
        '500':
          description: Internal Error
  /workflows/{localWorkflowId}/exchanges:
    post:
      summary: >-
        Creates a new exchange and returns location of exchange metadata in a
        response header.
      tags:
        - exchanges_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: createExchange
      description: >-
        Creates a new exchange and returns location of exchange metadata in a
        response header.
      x-expectedCaller: Owner Coordinator
      parameters:
        - $ref: '#/components/parameters/LocalWorkflowId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExchangeRequest'
      responses:
        '201':
          description: Exchange successfully created (with data)
          headers:
            Location:
              schema:
                type: string
                format: uri
                description: The HTTP URL used to retrieve exchange metadata.
                example: https://issuer.example.com/workflows/123/exchanges/abc
        '204':
          description: Exchange successfully created (without data)
          headers:
            Location:
              schema:
                type: string
                format: uri
                description: The HTTP URL used to retrieve exchange metadata.
                example: https://issuer.example.com/workflows/123/exchanges/abc
        '400':
          description: Invalid input
        '401':
          description: Not Authorized
        '500':
          description: Internal Error
  /workflows/{localWorkflowId}/exchanges/{localExchangeId}:
    get:
      summary: >-
        Gets the state of an existing exchange and returns it in the response
        body.
      tags:
        - exchanges_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: getExchangeConfiguration
      description: >-
        Gets the configuration of an existing exchange and returns it in the
        response body.
      x-expectedCaller: Owner Coordinator
      parameters:
        - $ref: '#/components/parameters/LocalWorkflowId'
        - $ref: '#/components/parameters/LocalExchangeId'
      responses:
        '200':
          description: Exchange configuration retrieved!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeResponse'
        '400':
          description: Invalid input
        '401':
          description: Not Authorized
        '500':
          description: Internal Error
    post:
      summary: >-
        Participate in an exchange. Posting an empty body will start the
        exchange or return what the exchange is expecting to complete the next
        step. Posting a Verifiable Presentation Request will result in either a
        4xx error or one of the following - a Verifiable Presentation or
        Verifiable Presentation Request that conforms to the client's request.
        If a Verifiable Presentation is sent, an additional Verifiable
        Presentation Request may also be sent to continue the exchange.
      tags:
        - exchanges_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: participateInExchange
      description: >-
        Participate in an exchange. Posting an empty body will start the
        exchange or return what the exchange is expecting to complete the next
        step.
      x-expectedCaller: Anyone
      parameters:
        - $ref: '#/components/parameters/LocalWorkflowId'
        - $ref: '#/components/parameters/LocalExchangeId'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    verifiablePresentationRequest:
                      $ref: '#/components/schemas/VerifiablePresentationRequest'
                - type: object
                  properties:
                    verifiablePresentation:
                      $ref: '#/components/schemas/VerifiablePresentation'
      responses:
        '200':
          description: Exchange progressed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeParticipationResponse'
        '400':
          description: Invalid input
        '401':
          description: Not Authorized
        '500':
          description: Internal Error
  /workflows/{localWorkflowId}/exchanges/{localExchangeId}/protocols:
    get:
      summary: Gets the supported protocols for interacting with a specific exchange.
      tags:
        - exchanges_Exchanges
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: getSupportedProtocolsConfiguration
      description: Gets the supported protocols for interacting with a specific exchange.
      x-expectedCaller:
        - Verification Coordinator
        - Holder Coordinator
      parameters:
        - $ref: '#/components/parameters/LocalWorkflowId'
        - $ref: '#/components/parameters/LocalExchangeId'
      responses:
        '200':
          description: Protocols understood by the exchange.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExchangeProtocolsResponse'
        '400':
          description: Invalid input
        '401':
          description: Not Authorized
        '500':
          description: Internal Error
  /credentials/{id}:
    get:
      tags:
        - holder_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      summary: >-
        Gets a credential or verifiable credential by ID. To get a credential
        that does not have credential.id set but has an associated credentialId
        value, pass credentialId instead.
      x-expectedCaller: Issuer Coordinator
      operationId: getCredential
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Credential retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/VerifiableCredentialResponse'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Credential not found
        '410':
          description: Gone! There is no data here
        '418':
          description: >-
            I'm a teapot - MUST not be returned outside of pre-arranged
            scenarios between both parties
    delete:
      tags:
        - holder_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      summary: >-
        Deletes a credential or verifiable credential by ID. To delete a
        credential that does not have credential.id set but has an associated
        credentialId value, pass credentialId instead.
      x-expectedCaller:
        - Issuer Coordinator
        - Holder Coordinator
      operationId: deleteCredential
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '202':
          description: >-
            Credential deleted - this is a 202 by default as soft deletes and
            processing time are assumed
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Credential not found
        '410':
          description: Gone! There is no data here
  /credentials/derive:
    post:
      tags:
        - holder_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      summary: Derives a credential and returns it in the response body.
      operationId: deriveCredential
      description: Derives a credential and returns it in the response body.
      x-expectedCaller: Holder Coordinator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeriveCredentialRequest'
        description: Parameters for deriving the credential.
      responses:
        '201':
          description: Credential derived successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiableCredential'
        '400':
          description: Invalid Request
  /presentations/{id}:
    get:
      tags:
        - holder_Presentations
      summary: Gets a presentation or verifiable presentation by ID
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: getPresentation
      x-expectedCaller: Holder Coordinator
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Credential retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Presentation'
                  - $ref: '#/components/schemas/VerifiablePresentation'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Presentation not found
        '410':
          description: Gone! There is no data here
    delete:
      tags:
        - holder_Presentations
      summary: Deletes a presentation or verifiable presentation by ID
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: deletePresentation
      x-expectedCaller: Holder Coordinator
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '202':
          description: >-
            Presentation deleted - this is a 202 by default as soft deletes and
            processing time are assumed
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Presentation not found
        '410':
          description: Gone! There is no data here
  /presentations:
    get:
      tags:
        - holder_Presentations
      summary: Gets list of presentations or verifiable presentations
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: getPresentations
      x-expectedCaller: Holder Coordinator
      parameters:
        - in: query
          name: type
          schema:
            type: array
            items:
              type: string
              pattern: (presentations|verifiablepresentations|all)
      responses:
        '200':
          description: Presentations retrieved
          content:
            application/json:
              schema:
                type: array
                description: The Presentations
                items:
                  anyOf:
                    - $ref: '#/components/schemas/Presentation'
                    - $ref: '#/components/schemas/VerifiablePresentation'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '410':
          description: Gone! There is no data here
    post:
      summary: Creates a presentation and returns it in the response body.
      tags:
        - holder_Presentations
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: createPresentation
      x-expectedCaller: Holder Coordinator
      description: Creates a presentation and returns it in the response body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePresentationRequest'
        description: Parameters for creating the presentation.
      responses:
        '201':
          description: Presentation successfully created!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePresentationResponse'
        '400':
          description: invalid input!
  /exchanges:
    get:
      summary: >-
        Provides a discovery endpoint for the exchanges supported by this server
        endpoint.
      tags:
        - holder_Exchanges
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: discoverExchanges
      description: >-
        This endpoint returns an array of the exchange-ids (path endpoints)
        supported by this server, and the associated protocol supported by each
        exchange endpoint. The list supports pagination.

        Clients consuming this list and wishing to use an exchange endpoint MUST
        recognize and support the protocol identified in the value field.
        Clients are not expected to dynamically process the protocol specified.
      parameters:
        - name: index
          in: query
          description: >-
            The starting index for the list that is meaningful to the server. If
            omitted, the server must assume the start of the list.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            The maximum number of items to return in the response. If omitted,
            the service should

            return all remaining items from the start index.
          required: false
          schema:
            type: number
      responses:
        '200':
          description: >-
            A map of the exchange-id endpoints to protocols those exchanges
            support.
          content:
            application/json:
              schema:
                required:
                  - count
                  - index
                  - total
                  - exchanges
                properties:
                  count:
                    type: number
                    description: The number of elements returned in the array.
                  total:
                    type: number
                    description: The total number of elements available.
                  exchanges:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: >-
                            the path name of the exchange endpoint. May be a
                            UUID.
                        type:
                          type: string
                          description: >-
                            MUST be a string that references the protocol
                            supported on that endpoint.
                  index:
                    type: object
                    properties:
                      self:
                        type: string
                        description: >-
                          The index position of the start of the returned list.
                          Examples could be a numerical value,

                          a URL, or a value meaningful to the server.
                      next:
                        type: string
                        description: >-
                          The index position for the next set of results (i.e.,
                          index of the end of this list). Examples could be a
                          numerical value, a URL, or a value meaningful to the
                          server.
              example:
                count: 3
                total: 8
                exchanges:
                  - id: credential-refresh
                    type: CredentialRefresh2020
                  - id: 34901-18388409-1939
                    type: PresentationExchange1.0
                  - id: salad
                    type: https://example.com/oas/my-salad.yml
                index:
                  self: '0'
                  next: '3'
        '400':
          description: invalid input
  /exchanges/{exchange-id}:
    post:
      summary: Initiates an exchange of information.
      tags:
        - holder_Exchanges
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: initiateExchange
      description: >-
        A client can use this endpoint to initiate an exchange of a particular
        type. The client can include HTTP POST information related to the
        details of exchange it would like to initiate. If the server understands
        the request, it returns a Verifiable Presentation Request. A request
        that the server cannot understand results in an error.
      parameters:
        - $ref: '#/components/parameters/ExchangeId'
      requestBody:
        description: >-
          Information related to the type of exchange the client would like to
          start.
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  description: Data necessary to initiate the exchange.
                - $ref: '#/components/schemas/NotifyPresentationAvailableRequest'
      responses:
        '200':
          description: Proceed with exchange.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiablePresentationRequestBody'
        '400':
          description: Request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /credentials/issue:
    post:
      summary: Issues a credential and returns it in the response body.
      tags:
        - issuer_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: issueCredential
      x-expectedCaller: Issuer Coordinator
      description: Issues a credential and returns it in the response body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCredentialRequest'
        description: Parameters for issuing the credential.
      responses:
        '201':
          description: Credential successfully issued!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCredentialResponse'
        '400':
          description: >
            The request could not be processed due to one of the following
            reasons:
                        - The provided value of 'issuer' does not match the expected configuration.
                        - Another condition that results in a Bad Request.
  /credentials/status:
    post:
      summary: Updates the status of an issued credential
      tags:
        - issuer_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: updateCredentialStatus
      x-expectedCaller: Issuer Service
      description: Updates the status of an issued credential.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCredentialStatusRequest'
        description: Parameters for updating the status of the issued credential.
      responses:
        '200':
          description: Credential status successfully updated
        '400':
          description: Bad Request
        '404':
          description: Credential not found
  /credentials/verify:
    post:
      summary: >-
        Verifies a verifiableCredential and returns a verificationResult in the
        response body.
      tags:
        - verifier_Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: verifyCredential
      x-expectedCaller: Verification Coordinator
      description: >-
        Verifies a verifiableCredential and returns a verificationResult in the
        response body.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/VerifyCredentialRequest'
                - $ref: '#/components/schemas/VerifyEnvelopedCredentialRequest'
        description: Parameters for verifying a verifiableCredential.
      responses:
        '200':
          description: Verifiable Credential successfully verified!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
        '400':
          description: invalid input!
  /presentations/verify:
    post:
      summary: >-
        Verifies a Presentation with or without proofs attached and returns a
        verificationResult in the response body.
      tags:
        - verifier_Presentations
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: verifyPresentation
      x-expectedCaller: Verification Coordinator
      description: >-
        Verifies a verifiablePresentation and returns a verificationResult in
        the response body.  Given the possibility of denial of service, buffer
        overflow, or other style attacks, an implementation is permitted to rate
        limit or restrict requests against this API endpoint to those requests
        that contain only a single credential with a 413 or 429 error code as
        appropriate.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/VerifyPresentationRequest'
                - $ref: '#/components/schemas/ProoflessVerifyPresentationRequest'
                - $ref: '#/components/schemas/VerifyEnvelopedPresentationRequest'
        description: Parameters for verifying a verifiablePresentation.
      responses:
        '200':
          description: Verifiable Presentation successfully verified!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-VerificationResult'
        '400':
          description: Invalid or malformed input
        '413':
          description: Payload too large
        '429':
          description: Request rate limit exceeded.
  /challenges:
    post:
      summary: >-
        Passing an empty body to this endpoint creates and returns a challenge
        string in the response body.
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: challenge
      x-expectedCaller: Verification Coordinator
      description: >-
        Creates a challenge to be used as `options.challenge` in future
        requests.
      responses:
        '200':
          description: Challenge created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChallengeResult'
        '400':
          description: Invalid or malformed input
      tags:
        - verifier_other
components:
  securitySchemes:
    networkAuth:
      type: http
      scheme: bearer
      bearerFormat: sourceIpAccessRules
    zCap:
      type: http
      scheme: bearer
      bearerFormat: AuthorizationCapability
    didAuth:
      type: http
      scheme: bearer
      bearerFormat: VerifiablePresentation
    oAuth2:
      type: http
      scheme: bearer
      bearerFormat: VcapiOauth2
  schemas:
    CreateWorkflowRequest:
      type: object
      additionalProperties: false
      description: Object containing information for creating a workflow.
      properties:
        id:
          type: string
          description: >-
            The ID that will be used for the created workflow. Passing an ID is
            OPTIONAL.
        initialStep:
          type: string
          description: >-
            The step from the above set that the exchange starts on. Passing
            intialStep is REQUIRED.
        controller:
          type: string
          description: The controller of the instance. Passing controller is OPTIONAL.
        authorization:
          type: object
          description: >-
            Authorization scheme information (e.g., OAuth2 configuration).
            Passing authorization is OPTIONAL.
          properties:
            oauth2:
              type: object
              description: OAuth2 configuration.
              properties:
                issuerConfigUrl:
                  type: string
                  description: OAuth2 issuer config URL.
        credentialTemplates:
          type: array
          description: >-
            One or more VC templates for issuance. Passing credentialTemplates
            is OPTIONAL.
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of template.
              template:
                type: string
                description: The template itself.
        steps:
          type: object
          description: >-
            One or more steps required to complete an exchange on the workflow.
            Passing the steps object is REQUIRED. The keys are one or more step
            names, where each STEP_NAME is replaced by the name of a step (such
            as <code>request-employee-id</code>), and the values are step
            configurations.
          properties:
            STEP_NAME:
              $ref: '#/components/schemas/WorkflowStep'
    GetWorkflowResponse:
      type: object
      additionalProperties: false
      description: Object containing information about a workflow.
      properties:
        id:
          type: string
          description: >-
            The ID that will be used for the created workflow. Passing an ID is
            OPTIONAL.
        initialStep:
          type: string
          description: >-
            The step from the above set that the exchange starts on. Passing
            intialStep is REQUIRED.
        controller:
          type: string
          description: The controller of the instance. Passing controller is OPTIONAL.
        authorization:
          type: object
          description: >-
            Authorization scheme information (e.g., OAuth2 configuration).
            Passing authorization is OPTIONAL.
          properties:
            oauth2:
              type: object
              description: OAuth2 configuration.
              properties:
                issuerConfigUrl:
                  type: string
                  description: OAuth2 issuer config URL.
        credentialTemplates:
          type: array
          description: >-
            One or more VC templates for issuance. Passing credentialTemplates
            is OPTIONAL.
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of template.
              template:
                type: string
                description: The template itself.
        steps:
          type: object
          description: >-
            One or more steps required to complete an exchange on the workflow.
            The keys are one or more step names, where each STEP_NAME is
            replaced by the name of a step (such as
            <code>request-employee-id</code>), and the values are step
            configurations.
          properties:
            STEP_NAME:
              $ref: '#/components/schemas/WorkflowStep'
    CreateExchangeRequest:
      type: object
      description: Object containing information about the exchange to be created.
      properties:
        expires:
          type: string
          description: >-
            The date and time (expressed as an XML Schema dateTimeStamp) that
            the exchange expires.
        variables:
          type: object
          description: Template variables to be used in the exchange.
        openId:
          type: object
          description: Optional parameters to enable OID4* protocol for delivery.
    ExchangeParticipationResponse:
      type: object
      description: Either what the exchange is expecting next or a result of the exchange.
      oneOf:
        - type: object
          properties:
            verifiablePresentationRequest:
              $ref: '#/components/schemas/VerifiablePresentationRequest'
        - type: object
          properties:
            verifiablePresentation:
              $ref: '#/components/schemas/VerifiablePresentation'
        - type: object
          properties:
            redirectUrl:
              type: string
              description: The URL the exchange wishes to redirect the client to.
    GetExchangeProtocolsResponse:
      type: object
      additionalProperties: false
      description: >-
        Object containing information about the protocols that can be used to
        perform a specific exchange.
      properties:
        protocols:
          type: object
          description: >-
            An object containing one or more protocols that can be used to
            perform the specific exchange.
          properties:
            interact:
              type: string
              description: >-
                A URL that can be used during exchange flows with a human in the
                loop. See the section on the <a
                href="#dfn-interaction-url">interact URL format</a> for more
                details.
            vcapi:
              type: string
              description: The URL to use when initiating a VC API exchange.
            OID4VP:
              type: string
              description: The URL to use when initiating an OID4VP presentation.
            OID4VCI:
              type: string
              description: The URL to use when initiating an OID4VCI issuance.
    GetExchangeResponse:
      type: object
      additionalProperties: false
      description: Object containing information about an active exchange.
      properties:
        id:
          type: string
          description: The local exchange ID that identifies the exchange.
        sequence:
          type: integer
          description: A sequence number for the exchange. Set to 0 on creation.
        expires:
          type: string
          description: >-
            The date and time (expressed as an XML Schema dateTimeStamp) that
            the exchange expires.
        step:
          type: string
          description: The current step in the exchange.
        state:
          type: string
          description: >-
            The status ("pending" | "active" | "complete" | "invalid") of the
            exchange, set to "pending" on creation.
        variables:
          type: object
          description: Template variables to be used in the exchange.
    WorkflowStep:
      type: object
      description: Object containing information about a workflow step.
      oneOf:
        - $ref: '#/components/schemas/StepData'
        - type: object
          properties:
            stepTemplate:
              $ref: '#/components/schemas/StepTemplate'
    StepTemplate:
      type: object
      additionalProperties: false
      description: >-
        A template for a workflow step. Either this must be present or the other
        step data must be present, but not both sets.
      properties:
        type:
          type: string
          description: The type of template.
        template:
          type: string
          description: The step template.
    StepData:
      type: object
      additionalProperties: false
      description: Step data to be included if a template is not used.
      properties:
        createChallenge:
          type: boolean
          description: >-
            An optional step directive that tells the exchange to handle
            challenge management via a VC API verifier service it has a zcap
            for.
        verifiablePresentationRequest:
          $ref: '#/components/schemas/VerifiablePresentationRequest'
        presentationSchema:
          oneOf:
            - type: object
              description: >-
                A JSON Schema describing the validation to be performed on the
                presentation.
              properties:
                type:
                  type: string
                  description: The value MUST be <code>JsonSchema</code>.
                jsonSchema:
                  type: object
                  description: >-
                    The JSON Schema object to use when validating the
                    presentation.
            - type: object
              description: >-
                An alternate presentation schema format to use when validating a
                presentation in the current step. Additional properties are
                expected for a specific presentation schema type, but are beyond
                the scope of this specification.
              properties:
                types:
                  type: string
                  description: >-
                    The type of presentation schema mechanism to use when
                    validating the presentation.
        verifyPresentationResponseSchema:
          oneOf:
            - type: object
              description: >-
                A JSON Schema describing the validation to be performed on the
                result of verifying the presentation.
              properties:
                type:
                  type: string
                  description: The value MUST be <code>JsonSchema</code>.
                jsonSchema:
                  type: object
                  description: >-
                    The JSON Schema object to use when validating the result of
                    verifying the presentation.
            - type: object
              description: >-
                An alternate presentation schema format to use on the result of
                verifying a presentation in the current step. Additional
                properties are expected for a specific presentation schema type,
                but are beyond the scope of this specification.
              properties:
                types:
                  type: string
                  description: >-
                    The type of presentation schema mechanism to use when
                    validating the result of verifying the presentation.
        nextStep:
          type: string
          description: >-
            The name of the next step in the sequence. Passing nextStep is
            OPTIONAL. This field MUST NOT be present on the final step
            configuration.
        openId:
          type: object
          description: Optional information to trigger OID4VP
          properties:
            createAuthorizationRequest:
              type: string
              description: >-
                If present, identifies the name of the template variable (in
                <code>variables</code> for an <a
                href="#create-exchange">exchange</a>) that the auto-generated
                OpenID for Verifiable Presentations Authorization Request will
                be stored in for subsequent use in the exchange. Either this or
                <code>authorizationRequest</code> MUST be present, but not both.
                The value of the named variable can be lazily generated when the
                Authorization Request is required, i.e., after the client of the
                exchange chooses to use the OID4VP protocol. This feature allows
                the Authorization Request to be generated by reusing values,
                e.g., a Verifiable Presentation Request, that only need to be
                specified once across multiple protocol offerings.
            authorizationRequest:
              type: object
              description: >-
                If present, an OID4VP Authorization Request for subsequent use
                in the exchange. Either this or
                <code>createAuthorizationRequest</code> MUST be present, but not
                both.
    VerifiablePresentationRequest:
      type: object
      description: A Verifiable Presentation Request.
      properties:
        query:
          type: array
          description: A set of one or more queries sent by the requester.
          items:
            type: object
            properties:
              type:
                type: array
                description: The type of the query.
                items:
                  type: string
        challenge:
          type: string
          description: >-
            A challenge, intended to prevent replay attacks, provided by the
            requester that is typically expected to be included in the
            Verifiable Presentation response.
        domain:
          type: string
          description: >-
            A domain, intended to prevent replay attacks, provided by the
            requester that is typically expected to be included in the
            Verifiable Presentation response.
          items:
            type: string
        interact:
          type: array
          description: A list of interaction mechanisms that are supported by the server.
          items:
            type: object
            properties:
              service:
                type: object
                description: >-
                  A service that is supported by the server that is capable of
                  receiving a response to the Verifiable Presentation Request.
                properties:
                  type:
                    type: array
                    description: The type of the service.
                    items:
                      type: string
                  serviceEndpoint:
                    type: string
                    description: >-
                      A URL that can be utilized for interacting with the
                      service for the purposes of responding to the Verifiable
                      Presentation Request.
      example:
        query:
          - type: DIDAuthentication
          - type: QueryByExample
            credentialQuery:
              reason: We need to see your existing University Degree credential.
              example:
                '@context':
                  - https://www.w3.org/2018/credentials/v1
                  - https://www.w3.org/2018/credentials/examples/v1
                type: UniversityDegreeCredential
        challenge: 3182bdea-63d9-11ea-b6de-3b7c1404d57f
        domain: edu.example
        interact:
          service:
            - type: UnmediatedPresentationService2021
              serviceEndpoint: https://edu.example/workflows/123456/presentations
    Issuer:
      type: object
      description: A JSON-LD Verifiable Credential Issuer.
      oneOf:
        - type: string
        - type: object
          properties:
            id:
              type: string
              description: The issuer id.
      example:
        id: did:key:z6MkjRagNiMu91DduvCvgEsqLZDVzrJzFrwahc4tXLt9DoHd
    Credential:
      type: object
      description: A JSON-LD Verifiable Credential without a proof.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the credential.
          items:
            type: string
        id:
          type: string
          description: >-
            The ID of the credential. This property MAY be empty. The issuer
            SHOULD NOT auto-generate the id property if not provided, as a
            Verifiable Credential does not require the id property to be valid,
            and there are use cases for which the id property cannot be set.
        type:
          type: array
          description: The JSON-LD type of the credential.
          items:
            type: string
        issuer:
          $ref: '#/components/schemas/Issuer'
        issuanceDate:
          type: string
          description: The issuanceDate
        expirationDate:
          type: string
          description: The expirationDate
        credentialSubject:
          type: object
          description: The subject
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        id: http://example.gov/credentials/3732
        type:
          - VerifiableCredential
          - UniversityDegreeCredential
        issuer: did:example:123
        validFrom: '2020-03-16T22:37:26.544Z'
        credentialSubject:
          id: did:example:123
          degree:
            type: BachelorDegree
            name: Bachelor of Science and Arts
    DataIntegrityProof:
      type: object
      description: >-
        A Data Integrity Proof as defined by the W3C VC Data Integrity
        specification.
      properties:
        type:
          type: string
          description: Data Integrity Proof type.
        cryptosuite:
          type: string
          description: The name of the cryptographic suite.
        created:
          type: string
          description: Date the proof was created.
        nonce:
          type: string
          description: >-
            A value chosen by the creator of a proof to randomize proof values
            for privacy purposes.
        verificationMethod:
          type: string
          description: Verification Method used to verify proof.
        proofPurpose:
          type: string
          description: The purpose of the proof to be used with verificationMethod.
        proofValue:
          type: string
          description: Value of the Linked Data proof.
      example:
        type: DataIntegrityProof
        cryptosuite: ecdsa-rdfc-2019
        created: '2024-01-11T19:14:04Z'
        verificationMethod: >-
          https://di.example/issuer#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP
        proofPurpose: assertionMethod
        proofValue: >-
          zXb23ZkdakfJNUhiTEdwyE598X7RLrkjnXEADLQZ7vZyUGXX8cyJZRBkNw813SGsJHWrcpo4Y8hRJ7adYn35Eetq
    VerifiableCredential:
      type: object
      description: A JSON-LD Verifiable Credential with a proof.
      allOf:
        - $ref: '#/components/schemas/Credential'
        - type: object
          properties:
            proof:
              $ref: '#/components/schemas/DataIntegrityProof'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        id: http://example.gov/credentials/3732
        type:
          - VerifiableCredential
          - UniversityDegreeCredential
        issuer: did:example:123
        validFrom: '2020-03-16T22:37:26.544Z'
        credentialSubject:
          id: did:example:123
          degree:
            type: BachelorDegree
            name: Bachelor of Science and Arts
        proof:
          type: DataIntegrityProof
          cryptosuite: ecdsa-rdfc-2019
          created: '2020-04-02T18:28:08Z'
          verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
          proofPurpose: assertionMethod
          proofValue: >-
            zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
    Presentation:
      type: object
      description: A JSON-LD Verifiable Presentation without a proof.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the presentation.
          items:
            type: string
        id:
          type: string
          description: The ID of the presentation.
        type:
          type: array
          description: The JSON-LD type of the presentation.
          items:
            type: string
        holder:
          type: object
          description: >-
            The holder - will be ignored if no proof is present since there is
            no proof of authority over the credentials
          nullable: true
        verifiableCredential:
          type: array
          description: The Verifiable Credentials
          items:
            $ref: '#/components/schemas/VerifiableCredential'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        holder: did:example:123
        type: VerifiablePresentation
        verifiableCredential:
          - '@context':
              - https://www.w3.org/ns/credentials/v2
              - https://www.w3.org/ns/credentials/examples/v2
          - id: http://example.gov/credentials/3732
          - type:
              - VerifiableCredential
              - UniversityDegreeCredential
          - issuer: did:example:123
          - validFrom: '2020-03-16T22:37:26.544Z'
          - credentialSubject:
              id: did:example:123
              degree:
                type: BachelorDegree
                name: Bachelor of Science and Arts
          - proof:
              type: DataIntegrityProof
              cryptosuite: ecdsa-rdfc-2019
              created: '2020-04-02T18:28:08Z'
              verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
              proofPurpose: assertionMethod
              proofValue: >-
                eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA
    DataIntegrityProofWithChallenge:
      type: object
      description: >-
        A Data Integrity Proof that includes a challenge and a domain as defined
        by the W3C VC Data Integrity specification.
      properties:
        type:
          type: string
          description: Data Integrity Proof type.
        cryptosuite:
          type: string
          description: The name of the cryptographic suite.
        created:
          type: string
          description: Date the proof was created.
        challenge:
          type: string
          description: >-
            A value chosen by the verifier to mitigate authentication proof
            replay attacks.
        domain:
          type: string
          description: The domain of the proof to restrict its use to a particular target.
        nonce:
          type: string
          description: >-
            A value chosen by the creator of a proof to randomize proof values
            for privacy purposes.
        verificationMethod:
          type: string
          description: Verification Method used to verify proof.
        proofPurpose:
          type: string
          description: The purpose of the proof to be used with verificationMethod.
        proofValue:
          type: string
          description: Value of the Linked Data proof.
      example:
        type: DataIntegrityProof
        cryptosuite: ecdsa-rdfc-2019
        created: '2024-01-11T19:14:04Z'
        domain: domain.example
        challenge: ce2e12b0-35a0-11f0-85df-7bcb79038e44
        verificationMethod: >-
          https://di.example/holder#zDnadqAtcdP6agfXsTWu5darHnbGyTDkKGFYmn8dQraYzCJMZ
        proofPurpose: authentication
        proofValue: >-
          zXb23ZkdakfJNUhiTEdwyE598X7RLrkjnXEADLQZ7vZyUGXX8cyJZRBkNw813SGsJHWrcpo4Y8hRJ7adYn35Eetq
    VerifiablePresentation:
      type: object
      description: A JSON-LD Verifiable Presentation with a proof.
      allOf:
        - $ref: '#/components/schemas/Presentation'
        - type: object
          properties:
            proof:
              $ref: '#/components/schemas/DataIntegrityProofWithChallenge'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        holder: did:example:123
        type: VerifiablePresentation
        verifiableCredential:
          - '@context':
              - https://www.w3.org/ns/credentials/v2
              - https://www.w3.org/ns/credentials/examples/v2
          - id: http://example.gov/credentials/3732
          - type:
              - VerifiableCredential
              - UniversityDegreeCredential
          - issuer: did:example:123
          - validFrom: '2020-03-16T22:37:26.544Z'
          - credentialSubject:
              id: did:example:123
              degree:
                type: BachelorDegree
                name: Bachelor of Science and Arts
          - proof:
              type: DataIntegrityProof
              cryptosuite: eddsa-rdfc-2022
              created: '2020-04-02T18:28:08Z'
              verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
              proofPurpose: assertionMethod
              proofValue: >-
                zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
        proof:
          type: DataIntegrityProof
          cryptosuite: ecdsa-rdfc-2019
          created: '2020-04-02T18:28:08Z'
          verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
          proofPurpose: assertionMethod
          proofValue: >-
            zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
    DeriveCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/VerifiableCredential'
        options:
          $ref: '#/components/schemas/DeriveCredentialOptions'
    DeriveCredentialResponse:
      $ref: '#/components/schemas/VerifiableCredential'
    CreatePresentationRequest:
      type: object
      properties:
        presentation:
          $ref: '#/components/schemas/Presentation'
        options:
          $ref: '#/components/schemas/PresentCredentialOptions'
    CreatePresentationResponse:
      type: object
      properties:
        verifiablePresentation:
          type: object
          description: A JSON-LD Verifiable Presentation with a proof.
          oneOf:
            - $ref: '#/components/schemas/VerifiablePresentation'
            - $ref: '#/components/schemas/EnvelopedVerifiablePresentation'
    NotifyPresentationAvailableRequest:
      type: object
      properties:
        query:
          type: object
          description: See https://w3c-ccg.github.io/vp-request-spec/#format
          properties:
            type:
              type: string
              description: The type of query the server should reply with.
            credentialQuery:
              type: object
              description: Details of the client's available presentation
      example:
        query:
          - type: RequestQueryByFrame
            credentialQuery:
              - type:
                  - VerifiableCredential
                  - CommercialInvoiceCertificate
                reason: Wallet XYZ is ready to selectively disclose new credentials.
    ErrorResponse:
      type: object
      description: A response that denotes that an error has occurred.
      properties:
        id:
          type: string
          pattern: '[a-z0-9\-]{8,}'
          description: An error id.
        message:
          type: string
          minLength: 10
          maxLength: 100
          description: The error message.
        details:
          type: object
          description: An object with error details.
      required:
        - id
        - message
      example:
        id: invalid-json
        message: The provided JSON data was malformed.
    StorePresentationRequest:
      $ref: '#/components/schemas/VerifiablePresentation'
    VerifiablePresentationRequestBody:
      type: object
      properties:
        verifiablePresentationRequest:
          $ref: '#/components/schemas/VerifiablePresentationRequest'
    VerifiablePresentationBody:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/VerifiablePresentation'
    EnvelopedVerifiableCredential:
      type: object
      description: >-
        An object used to associate an enveloped verifiable credential with the
        verifiableCredential property in a verifiable presentation.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the enveloped verifiable credential.
          items:
            type: string
        id:
          type: string
          description: >-
            This MUST be a "data:" scheme URL [RFC2397] that expresses a secured
            verifiable credential using an enveloping security scheme.
        type:
          type: string
          description: This MUST be EnvelopedVerifiableCredential.
      example:
        '@context': https://www.w3.org/ns/credentials/v2
        id: data:application/vc+sd-jwt;QzVjV...RMjU
        type: EnvelopedVerifiableCredential
    VerifiableCredentialResponse:
      type: object
      description: >-
        The format returned from a successful request for a verifiable
        credential.
      properties:
        verifiableCredential:
          type: object
          description: A JSON-LD Verifiable Credential with a proof.
          oneOf:
            - $ref: '#/components/schemas/VerifiableCredential'
            - $ref: '#/components/schemas/EnvelopedVerifiableCredential'
    DeriveCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how the derived credential is created.
      properties:
        selectivePointers:
          type: array
          description: >-
            An array of JSON pointers specifying the selectively disclosed
            information.
          items:
            type: string
      example:
        selectivePointers:
          - /credentialSubject/birthCountry
    PresentCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how the DataIntegrityProof is created.
      properties:
        type:
          type: string
          description: The type of the proof. Default 'DataIntegrityProof'.
        cryptosuite:
          type: string
          description: The cryptosuite of the proof.
        verificationMethod:
          type: string
          description: >-
            The URI of the verificationMethod used for the proof. If omitted, a
            default verification method will be used.
        proofPurpose:
          type: string
          description: The purpose of the proof. Default 'assertionMethod'.
        created:
          type: string
          description: >-
            The date and time of the proof (with a maximum accuracy in seconds).
            Default current system time.
        challenge:
          type: string
          description: >-
            A challenge provided by the requesting party of the proof. For
            example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
        domain:
          type: string
          description: >-
            The intended domain of validity for the proof. For example
            website.example
      example:
        type: DataIntegrityProof
        cryptosuite: ecdsa-rdfc-2019
        verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
        proofPurpose: assertionMethod
        created: '2020-04-02T18:48:36Z'
        domain: example.com
        challenge: d436f0c8-fbd9-4e48-bbb2-55fc5d0920a8
    EnvelopedVerifiablePresentation:
      type: object
      description: An object used to express an enveloped verifiable presentation.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the enveloped verifiable presentation.
          items:
            type: string
        id:
          type: string
          description: >-
            This MUST be a "data:" scheme URL [RFC2397] that expresses a secured
            verifiable presentation using an enveloping security scheme.
        type:
          type: string
          description: This MUST be EnvelopedVerifiablePresentation.
      example:
        '@context': https://www.w3.org/ns/credentials/v2
        id: data:application/vp+jwt,eyJraWQiO...zhwGfQ
        type: EnvelopedVerifiablePresentation
    UpdateCredentialStatusRequest:
      type: object
      required:
        - credentialId
        - credentialStatus
        - status
      additionalProperties: false
      description: Credential status information to be updated.
      properties:
        credentialId:
          type: string
          description: >-
            Identifies the credential (the identifier does not have to appear in
            the VC itself).
        credentialStatus:
          type: object
          description: Identifies the specific status list entry to update.
          required:
            - type
            - statusPurpose
          additionalProperties: false
          properties:
            id:
              type: string
            type:
              type: string
            statusPurpose:
              type: string
            statusListIndex:
              type: string
            statusListCredential:
              type: string
        status:
          type: boolean
          description: Specifies the new status.
        indexAllocator:
          type: string
          description: For services to use which indexes are being used/assigned to VCs.
      example:
        credentialId: 0fc754bc-fc32-46a0-aec1-a5ef385e7ea0
        credentialStatus:
          type: BitstringStatusList
          statusPurpose: revocation
        status: true
    IssueCredentialRequest:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/UnsecuredCredential'
        options:
          $ref: '#/components/schemas/IssueCredentialOptions'
    IssueCredentialResponse:
      type: object
      properties:
        IssueCredentialResponse:
          $ref: '#/components/schemas/VerifiableCredentialResponse'
    IssuerRequest:
      type: object
      description: >-
        A W3C Verifiable Credential Issuer. The presence of object 'issuer' is
        optional (and it SHOULD be omitted). If provided, it MUST adhere to the
        configuration requirements of the particular implementation.
        Implementations MUST be able to understand and process the supplied
        value in accordance with their configuration. In scenarios where
        multiple configurations exist for a specific endpoint, the 'issuer'
        object, if present, MAY be utilized to select among multiple potential
        issuers. In such cases, the provided 'issuer' value MUST align with the
        available configurations, allowing the implementation to appropriately
        determine the issuer for the specific request. Implementations MUST
        ensure that the selected issuer aligns with their configuration and can
        be processed successfully.
      oneOf:
        - type: string
        - type: object
          properties:
            id:
              type: string
              description: The issuer id.
      example:
        id: did:key:z6MkjRagNiMu91DduvCvgEsqLZDVzrJzFrwahc4tXLt9DoHd
    UnsecuredCredential:
      type: object
      description: A W3C Verifiable Credential intended for issuance.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the credential.
          items:
            type: string
        id:
          type: string
          description: The ID of the credential.
        type:
          type: array
          description: The JSON-LD type of the credential.
          items:
            type: string
        issuer:
          $ref: '#/components/schemas/IssuerRequest'
        validFrom:
          type: string
          description: The validFrom date
        validUntil:
          type: string
          description: The validUntil date
        credentialSubject:
          type: object
          description: The subject
        proof:
          type: object
          description: >
            An optional proof or array of proofs for credentials that are
            secured using proof sets or chains.  When present, the configuration
            of the issuer instance determines how these existing proofs are
            processed (e.g., append to create proof sets/chains, or trigger an
            error).
          oneOf:
            - type: object
            - type: array
              items:
                type: object
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        id: http://example.gov/credentials/3732
        type:
          - VerifiableCredential
          - UniversityDegreeCredential
        issuer: did:example:123
        validFrom: '2020-03-16T22:37:26.544Z'
        credentialSubject:
          id: did:example:123
          degree:
            type: BachelorDegree
            name: Bachelor of Science and Arts
    IssueCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how a credential is issued.
      properties:
        mandatoryPointers:
          type: array
          description: >-
            Used with selective disclosure schemes to specify mandatory reveal
            statements
          items:
            type: string
        credentialId:
          type: string
          description: >
            A URI that can be used to identify the credential, that can be used
            in APIs to refer to the issued verifiable credential. If
            credentialId is not provided by the issuer coordinator, the issuer
            service will auto-populate its value from credential.id. If neither
            credentialId nor credential.id is provided, it will not be possible
            to refer to this credential once issued nor to deal with errors of
            duplication. credentialId SHOULD NOT be set by the issuer
            coordinator if the credential.id property is set, nor should
            credentialId be used as a replacement for credential.id; rather,
            credentialId is a means of identifying a credential without the id
            property (i.e., credential.id) being set. The issuer service SHOULD
            NOT auto-generate a credentialId if one is not supplied by the
            issuer coordinator, because doing so could create a partitioning
            error if the result is never received by the client.
      example:
        credentialId: example.com/ad5d541f-db7a-4bff-97e1-d403ce403767
        mandatoryPointers:
          - /issuer
          - /validFrom
          - /validUntil
    VerifyCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/VerifiableCredential'
        options:
          $ref: '#/components/schemas/VerifyCredentialOptions'
    VerifyEnvelopedCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/EnvelopedVerifiableCredential'
        options:
          $ref: '#/components/schemas/VerifyCredentialOptions'
    VerifyCredentialResponse:
      $ref: '#/components/schemas/VerificationResult'
    VerifyPresentationRequest:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/VerifiablePresentation'
        options:
          $ref: '#/components/schemas/VerifyPresentationOptions'
    VerifyEnvelopedPresentationRequest:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/EnvelopedVerifiablePresentation'
        options:
          $ref: '#/components/schemas/VerifyPresentationOptions'
    ProoflessVerifyPresentationRequest:
      type: object
      properties:
        presentation:
          $ref: '#/components/schemas/Presentation'
    VerifyPresentationResponse:
      $ref: '#/components/schemas/schemas-VerificationResult'
    CreateChallengeResponse:
      $ref: '#/components/schemas/CreateChallengeResult'
    VerifyCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how a credential is verified
      properties:
        returnResults:
          type: boolean
          description: >-
            Include results for each verification steps taken in the response,
            such as verifying individual proofs, statuses and schemas.
        returnProblemDetails:
          type: boolean
          description: Include ProblemDetails errors and warnings in the response.
        returnCredential:
          type: boolean
          description: >-
            Should the verified credential be returned in the response? If true,
            then the verified credential should be returned in the form in which
            it was verified. If false or not provided, then the verified
            credential should not be returned.
      example:
        returnProblemDetails: true
        returnCredential: true
        returnResults: true
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          description: URL identifying the type of problem.
        title:
          type: string
          description: Short but specific human-readable string for the problem.
        detail:
          type: string
          description: Longer human-readable string for the problem.
      example:
        type: https://www.w3.org/TR/vc-data-model#PARSING_ERROR
        title: PARSING_ERROR
        detail: There was an error while parsing input.
    VerificationResult:
      type: object
      additionalProperties: false
      description: >-
        Object to report the result of a verification process on a
        VerifiableCredential.
      properties:
        verified:
          type: boolean
          description: >-
            Overall verification assertion of the VerifiableCredential. This is
            set to `True` if no errors were detected during the verification
            process; otherwise, `False`. See error handling section for more
            guidance around errors, warnings, and validation and verification
            steps.
        credential:
          type: object
          description: The VerifiableCredential used as the verification input.
        problemDetails:
          type: array
          description: Array consisting of ProblemDetails objects.
          items:
            $ref: '#/components/schemas/ProblemDetails'
        results:
          type: object
          additionalProperties: false
          description: >-
            Verification results to be included as a more verbose output. Keys
            are mapped to properties from the Verifiable Credential Data Model
            which are subject to validations.
          properties:
            validFrom:
              type: object
              description: >-
                Results of validating the validFrom property, if present in the
                VerifiableCredential.
              properties:
                valid:
                  type: boolean
                  description: Validation result.
                input:
                  type: string
                  description: The validFrom value.
            validUntil:
              type: object
              description: >-
                Results of validating the validUntil property, if present in the
                VerifiableCredential.
              properties:
                valid:
                  type: boolean
                  description: Validation result.
                input:
                  type: string
                  description: The validUntil value.
            credentialSchema:
              type: array
              description: Results from validating the credentialSchema objects if any.
              items:
                type: object
                description: Results from validating a credentialSchema object.
                properties:
                  valid:
                    type: boolean
                    description: Results of validating the credentialSchema object.
                  input:
                    type: object
                    description: The credentialSchema object.
            credentialStatus:
              type: array
              description: Results from validating the credentialStatus objects if any.
              items:
                type: object
                description: Results of validating a credentialStatus object.
                properties:
                  value:
                    type: integer
                    description: Value of the statusEntry Bit.
                  valid:
                    type: boolean
                    description: Results of validating the credentialStatus object.
                  input:
                    type: object
                    description: The credentialStatus object.
            proof:
              type: array
              description: Results from validating the proof objects if any.
              items:
                type: object
                description: Results from validating a proof object.
                properties:
                  valid:
                    type: boolean
                    description: Results of validating the proof object.
                  input:
                    type: object
                    description: The proof object.
      example:
        verified: false
        credential: {}
        problemDetails:
          - title: PARSING_ERROR
            type: 'https://www.w3.org/TR/vc-data-model#PARSING_ERROR '
        results:
          validFrom: []
          validUntil: []
          credentialSchema: []
          credentialStatus: []
          proof: []
    VerifyPresentationOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how a presentation is verified.
      properties:
        challenge:
          type: string
          description: >-
            A challenge provided by the requesting party of the proof; for
            example, <code>6e62f66e-67de-11eb-b490-ef3eeefa55f2</code>.
        domain:
          type: string
          description: >-
            The intended domain of validity for the proof; for example,
            <code>website.example</code>.
        returnPresentation:
          type: boolean
          description: >-
            Whether or not to return the verified presentation. If true, then
            the verified presentation MUST be returned. If false or not
            provided, then the verified presentation MUST NOT be returned.
      example:
        domain: example.com
        challenge: d436f0c8-fbd9-4e48-bbb2-55fc5d0920a8
        returnPresentation: true
    schemas-VerificationResult:
      type: object
      additionalProperties: false
      description: >-
        Object to report the result of a verification process on a
        VerifiablePresentation.
      properties:
        verified:
          type: boolean
          description: >-
            Overall verification assertion of the VerifiablePresentation. This
            is set to `True` if no errors were detected during the verification
            process; otherwise, `False`. See error handling section for more
            guidance around errors, warnings, and validation and verification
            steps.
        verifiablePresentation:
          type: object
          description: The VerifiablePresentation used as the verification input.
        problemDetails:
          type: array
          description: Array consisting of ProblemDetails objects.
          items:
            $ref: '#/components/schemas/ProblemDetails'
        results:
          type: object
          additionalProperties: false
          description: >-
            Verification results to be included as a more verbose output. Keys
            are mapped to properties from the Verifiable Credential Data Model
            which are subject to validations.
          properties:
            challenge:
              type: object
              description: >-
                If provided in the verification options, the result of
                validating the security challenge across all proofs provided.
              properties:
                valid:
                  type: boolean
                  description: >-
                    Result of validating the security challenge across all
                    proofs provided.
                input:
                  type: string
                  description: The challenge input string.
            domain:
              type: object
              description: >-
                If provided in the verification options, the result of
                validating the security domain across all proofs provided.
              properties:
                valid:
                  type: boolean
                  description: >-
                    Result of validating the security domain across all proofs
                    provided.
                input:
                  type: string
                  description: The security domain input string.
            holder:
              type: object
              description: Result from validating the holder, if any.
              properties:
                valid:
                  type: boolean
                  description: Result of validating the holder.
                input:
                  type: string
                  description: The holder input string.
            proof:
              type: array
              description: Results from validating the proof objects if any.
              items:
                type: object
                description: Results from validating a proof object.
                properties:
                  valid:
                    type: boolean
                    description: Results of validating the proof object.
                  input:
                    type: object
                    description: The proof object.
      example:
        verified: false
        verifiablePresentation: {}
        problemDetails:
          - title: PARSING_ERROR
            type: https://www.w3.org/TR/vc-data-model#PARSING_ERROR
        results:
          holder: {}
          proof: []
    CreateChallengeResult:
      type: object
      additionalProperties: false
      description: Object containg a challenge
      properties:
        challenge:
          type: string
          description: The challenge value
  parameters:
    LocalWorkflowId:
      name: localWorkflowId
      description: A local identifier for a workflow instance.
      in: path
      required: true
      schema:
        type: string
        pattern: '[a-z0-9][a-z0-9\-]{2,}'
    LocalExchangeId:
      name: localExchangeId
      description: A local identifier for an exchange instance.
      in: path
      required: true
      schema:
        type: string
        pattern: '[a-z0-9][a-z0-9\-]{2,}'
    ObjectId:
      in: path
      name: id
      required: true
      schema:
        anyOf:
          - type: string
            pattern: "[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}"
          - type: string
            pattern: z[1-9A-HJ-NP-Za-km-z]{21,22}
          - type: string
            pattern: u[a-zA-Z0-9_-]{22,23}
      example:
        - f37e5114-8b4a-11ec-b32e-fbd62b9502c1
        - z4Z1T4HdLdfXCFAhdhzdCqm
        - u7m8_ybOArX-EWeADqWCsIw
    ExchangeId:
      name: exchange-id
      description: A potentially human-readable identifier for an exchange.
      in: path
      required: true
      schema:
        type: string
        minimum: 3
        pattern: '[a-z0-9][a-z0-9\-]{2,}'
x-tagGroups:
  - name: VC Exchanges and Workflows API
    tags:
      - exchanges_Credentials
      - exchanges_Exchanges
  - name: VC Holder API
    tags:
      - holder_Credentials
      - holder_Presentations
      - holder_Exchanges
  - name: VC Issuer API
    tags:
      - issuer_Credentials
  - name: VC Verifier API
    tags:
      - verifier_Credentials
      - verifier_Presentations
      - verifier_other
