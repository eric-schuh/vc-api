openapi: 3.0.0
info:
  version: 0.0.3-unstable
  title: VC Holder API
  description: This is an Experimental Open API Specification for the [VC Data Model](https://www.w3.org/TR/vc-data-model/).
  license:
    name: W3C Software and Document License
    url: http://www.w3.org/Consortium/Legal/copyright-software.
  contact:
    name: GitHub Source Code
    url: https://github.com/w3c-ccg/vc-api
servers:
  - url: https://verifier.qa.veres.app/verifiers/z1A45ZhWEGMeibHrB15nv8Gk6
    description: Veres Verifier (Quality Assurance)
paths:
  /credentials/{id}:
    get:
      tags:
        - Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      summary: Gets a credential or verifiable credential by ID. To get a credential that does not have credential.id set but has an associated credentialId value, pass credentialId instead.
      x-expectedCaller: Issuer Coordinator
      operationId: getCredential
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Credential retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/VerifiableCredentialResponse'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Credential not found
        '410':
          description: Gone! There is no data here
        '418':
          description: I'm a teapot - MUST not be returned outside of pre-arranged scenarios between both parties
    delete:
      tags:
        - Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      summary: Deletes a credential or verifiable credential by ID. To delete a credential that does not have credential.id set but has an associated credentialId value, pass credentialId instead.
      x-expectedCaller:
        - Issuer Coordinator
        - Holder Coordinator
      operationId: deleteCredential
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '202':
          description: Credential deleted - this is a 202 by default as soft deletes and processing time are assumed
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Credential not found
        '410':
          description: Gone! There is no data here
  /credentials/derive:
    post:
      tags:
        - Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      summary: Derives a credential and returns it in the response body.
      operationId: deriveCredential
      description: Derives a credential and returns it in the response body.
      x-expectedCaller: Holder Coordinator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeriveCredentialRequest'
        description: Parameters for deriving the credential.
      responses:
        '201':
          description: Credential derived successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiableCredential'
        '400':
          description: Invalid Request
  /presentations/{id}:
    get:
      tags:
        - Presentations
      summary: Gets a presentation or verifiable presentation by ID
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: getPresentation
      x-expectedCaller: Holder Coordinator
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '200':
          description: Credential retrieved
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Presentation'
                  - $ref: '#/components/schemas/VerifiablePresentation'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Presentation not found
        '410':
          description: Gone! There is no data here
    delete:
      tags:
        - Presentations
      summary: Deletes a presentation or verifiable presentation by ID
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: deletePresentation
      x-expectedCaller: Holder Coordinator
      parameters:
        - $ref: '#/components/parameters/ObjectId'
      responses:
        '202':
          description: Presentation deleted - this is a 202 by default as soft deletes and processing time are assumed
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Presentation not found
        '410':
          description: Gone! There is no data here
  /presentations:
    get:
      tags:
        - Presentations
      summary: Gets list of presentations or verifiable presentations
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: getPresentations
      x-expectedCaller: Holder Coordinator
      parameters:
        - in: query
          name: type
          schema:
            type: array
            items:
              type: string
              pattern: (presentations|verifiablepresentations|all)
      responses:
        '200':
          description: Presentations retrieved
          content:
            application/json:
              schema:
                type: array
                description: The Presentations
                items:
                  anyOf:
                    - $ref: '#/components/schemas/Presentation'
                    - $ref: '#/components/schemas/VerifiablePresentation'
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '410':
          description: Gone! There is no data here
    post:
      summary: Creates a presentation and returns it in the response body.
      tags:
        - Presentations
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: createPresentation
      x-expectedCaller: Holder Coordinator
      description: Creates a presentation and returns it in the response body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePresentationRequest'
        description: Parameters for creating the presentation.
      responses:
        '201':
          description: Presentation successfully created!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePresentationResponse'
        '400':
          description: invalid input!
  /exchanges:
    get:
      summary: Provides a discovery endpoint for the exchanges supported by this server endpoint.
      tags:
        - Exchanges
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: discoverExchanges
      description: |-
        This endpoint returns an array of the exchange-ids (path endpoints) supported by this server, and the associated protocol supported by each exchange endpoint. The list supports pagination.
        Clients consuming this list and wishing to use an exchange endpoint MUST recognize and support the protocol identified in the value field. Clients are not expected to dynamically process the protocol specified.
      parameters:
        - name: index
          in: query
          description: The starting index for the list that is meaningful to the server. If omitted, the server must assume the start of the list.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |-
            The maximum number of items to return in the response. If omitted, the service should
            return all remaining items from the start index.
          required: false
          schema:
            type: number
      responses:
        '200':
          description: A map of the exchange-id endpoints to protocols those exchanges support.
          content:
            application/json:
              schema:
                required:
                  - count
                  - index
                  - total
                  - exchanges
                properties:
                  count:
                    type: number
                    description: The number of elements returned in the array.
                  total:
                    type: number
                    description: The total number of elements available.
                  exchanges:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: the path name of the exchange endpoint. May be a UUID.
                        type:
                          type: string
                          description: MUST be a string that references the protocol supported on that endpoint.
                  index:
                    type: object
                    properties:
                      self:
                        type: string
                        description: |-
                          The index position of the start of the returned list. Examples could be a numerical value,
                          a URL, or a value meaningful to the server.
                      next:
                        type: string
                        description: The index position for the next set of results (i.e., index of the end of this list). Examples could be a numerical value, a URL, or a value meaningful to the server.
              example:
                count: 3
                total: 8
                exchanges:
                  - id: credential-refresh
                    type: CredentialRefresh2020
                  - id: 34901-18388409-1939
                    type: PresentationExchange1.0
                  - id: salad
                    type: https://example.com/oas/my-salad.yml
                index:
                  self: '0'
                  next: '3'
        '400':
          description: invalid input
  /exchanges/{exchange-id}:
    post:
      summary: Initiates an exchange of information.
      tags:
        - Exchanges
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: initiateExchange
      description: A client can use this endpoint to initiate an exchange of a particular type. The client can include HTTP POST information related to the details of exchange it would like to initiate. If the server understands the request, it returns a Verifiable Presentation Request. A request that the server cannot understand results in an error.
      parameters:
        - $ref: '#/components/parameters/ExchangeId'
      requestBody:
        description: Information related to the type of exchange the client would like to start.
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  description: Data necessary to initiate the exchange.
                - $ref: '#/components/schemas/NotifyPresentationAvailableRequest'
      responses:
        '200':
          description: Proceed with exchange.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifiablePresentationRequestBody'
        '400':
          description: Request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    networkAuth:
      type: http
      scheme: bearer
      bearerFormat: sourceIpAccessRules
    zCap:
      type: http
      scheme: bearer
      bearerFormat: AuthorizationCapability
    didAuth:
      type: http
      scheme: bearer
      bearerFormat: VerifiablePresentation
    oAuth2:
      type: http
      scheme: bearer
      bearerFormat: VcapiOauth2
  schemas:
    DeriveCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/VerifiableCredential'
        options:
          $ref: '#/components/schemas/DeriveCredentialOptions'
    DeriveCredentialResponse:
      $ref: '#/components/schemas/VerifiableCredential'
    CreatePresentationRequest:
      type: object
      properties:
        presentation:
          $ref: '#/components/schemas/Presentation'
        options:
          $ref: '#/components/schemas/PresentCredentialOptions'
    CreatePresentationResponse:
      type: object
      properties:
        verifiablePresentation:
          type: object
          description: A JSON-LD Verifiable Presentation with a proof.
          oneOf:
            - $ref: '#/components/schemas/VerifiablePresentation'
            - $ref: '#/components/schemas/EnvelopedVerifiablePresentation'
    NotifyPresentationAvailableRequest:
      type: object
      properties:
        query:
          type: object
          description: See https://w3c-ccg.github.io/vp-request-spec/#format
          properties:
            type:
              type: string
              description: The type of query the server should reply with.
            credentialQuery:
              type: object
              description: Details of the client's available presentation
      example:
        query:
          - type: RequestQueryByFrame
            credentialQuery:
              - type:
                  - VerifiableCredential
                  - CommercialInvoiceCertificate
                reason: Wallet XYZ is ready to selectively disclose new credentials.
    ErrorResponse:
      type: object
      description: A response that denotes that an error has occurred.
      properties:
        id:
          type: string
          pattern: '[a-z0-9\-]{8,}'
          description: An error id.
        message:
          type: string
          minLength: 10
          maxLength: 100
          description: The error message.
        details:
          type: object
          description: An object with error details.
      required:
        - id
        - message
      example:
        id: invalid-json
        message: The provided JSON data was malformed.
    StorePresentationRequest:
      $ref: '#/components/schemas/VerifiablePresentation'
    VerifiablePresentationRequestBody:
      type: object
      properties:
        verifiablePresentationRequest:
          $ref: '#/components/schemas/VerifiablePresentationRequest'
    VerifiablePresentationBody:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/VerifiablePresentation'
    Issuer:
      type: object
      description: A JSON-LD Verifiable Credential Issuer.
      oneOf:
        - type: string
        - type: object
          properties:
            id:
              type: string
              description: The issuer id.
      example:
        id: did:key:z6MkjRagNiMu91DduvCvgEsqLZDVzrJzFrwahc4tXLt9DoHd
    Credential:
      type: object
      description: A JSON-LD Verifiable Credential without a proof.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the credential.
          items:
            type: string
        id:
          type: string
          description: The ID of the credential. This property MAY be empty. The issuer SHOULD NOT auto-generate the id property if not provided, as a Verifiable Credential does not require the id property to be valid, and there are use cases for which the id property cannot be set.
        type:
          type: array
          description: The JSON-LD type of the credential.
          items:
            type: string
        issuer:
          $ref: '#/components/schemas/Issuer'
        issuanceDate:
          type: string
          description: The issuanceDate
        expirationDate:
          type: string
          description: The expirationDate
        credentialSubject:
          type: object
          description: The subject
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        id: http://example.gov/credentials/3732
        type:
          - VerifiableCredential
          - UniversityDegreeCredential
        issuer: did:example:123
        validFrom: '2020-03-16T22:37:26.544Z'
        credentialSubject:
          id: did:example:123
          degree:
            type: BachelorDegree
            name: Bachelor of Science and Arts
    DataIntegrityProof:
      type: object
      description: A Data Integrity Proof as defined by the W3C VC Data Integrity specification.
      properties:
        type:
          type: string
          description: Data Integrity Proof type.
        cryptosuite:
          type: string
          description: The name of the cryptographic suite.
        created:
          type: string
          description: Date the proof was created.
        nonce:
          type: string
          description: A value chosen by the creator of a proof to randomize proof values for privacy purposes.
        verificationMethod:
          type: string
          description: Verification Method used to verify proof.
        proofPurpose:
          type: string
          description: The purpose of the proof to be used with verificationMethod.
        proofValue:
          type: string
          description: Value of the Linked Data proof.
      example:
        type: DataIntegrityProof
        cryptosuite: ecdsa-rdfc-2019
        created: '2024-01-11T19:14:04Z'
        verificationMethod: https://di.example/issuer#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP
        proofPurpose: assertionMethod
        proofValue: zXb23ZkdakfJNUhiTEdwyE598X7RLrkjnXEADLQZ7vZyUGXX8cyJZRBkNw813SGsJHWrcpo4Y8hRJ7adYn35Eetq
    VerifiableCredential:
      type: object
      description: A JSON-LD Verifiable Credential with a proof.
      allOf:
        - $ref: '#/components/schemas/Credential'
        - type: object
          properties:
            proof:
              $ref: '#/components/schemas/DataIntegrityProof'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        id: http://example.gov/credentials/3732
        type:
          - VerifiableCredential
          - UniversityDegreeCredential
        issuer: did:example:123
        validFrom: '2020-03-16T22:37:26.544Z'
        credentialSubject:
          id: did:example:123
          degree:
            type: BachelorDegree
            name: Bachelor of Science and Arts
        proof:
          type: DataIntegrityProof
          cryptosuite: ecdsa-rdfc-2019
          created: '2020-04-02T18:28:08Z'
          verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
          proofPurpose: assertionMethod
          proofValue: zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
    EnvelopedVerifiableCredential:
      type: object
      description: An object used to associate an enveloped verifiable credential with the verifiableCredential property in a verifiable presentation.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the enveloped verifiable credential.
          items:
            type: string
        id:
          type: string
          description: This MUST be a "data:" scheme URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme.
        type:
          type: string
          description: This MUST be EnvelopedVerifiableCredential.
      example:
        '@context': https://www.w3.org/ns/credentials/v2
        id: data:application/vc+sd-jwt;QzVjV...RMjU
        type: EnvelopedVerifiableCredential
    VerifiableCredentialResponse:
      type: object
      description: The format returned from a successful request for a verifiable credential.
      properties:
        verifiableCredential:
          type: object
          description: A JSON-LD Verifiable Credential with a proof.
          oneOf:
            - $ref: '#/components/schemas/VerifiableCredential'
            - $ref: '#/components/schemas/EnvelopedVerifiableCredential'
    DeriveCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how the derived credential is created.
      properties:
        selectivePointers:
          type: array
          description: An array of JSON pointers specifying the selectively disclosed information.
          items:
            type: string
      example:
        selectivePointers:
          - /credentialSubject/birthCountry
    Presentation:
      type: object
      description: A JSON-LD Verifiable Presentation without a proof.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the presentation.
          items:
            type: string
        id:
          type: string
          description: The ID of the presentation.
        type:
          type: array
          description: The JSON-LD type of the presentation.
          items:
            type: string
        holder:
          type: object
          description: The holder - will be ignored if no proof is present since there is no proof of authority over the credentials
          nullable: true
        verifiableCredential:
          type: array
          description: The Verifiable Credentials
          items:
            $ref: '#/components/schemas/VerifiableCredential'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        holder: did:example:123
        type: VerifiablePresentation
        verifiableCredential:
          - '@context':
              - https://www.w3.org/ns/credentials/v2
              - https://www.w3.org/ns/credentials/examples/v2
          - id: http://example.gov/credentials/3732
          - type:
              - VerifiableCredential
              - UniversityDegreeCredential
          - issuer: did:example:123
          - validFrom: '2020-03-16T22:37:26.544Z'
          - credentialSubject:
              id: did:example:123
              degree:
                type: BachelorDegree
                name: Bachelor of Science and Arts
          - proof:
              type: DataIntegrityProof
              cryptosuite: ecdsa-rdfc-2019
              created: '2020-04-02T18:28:08Z'
              verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
              proofPurpose: assertionMethod
              proofValue: eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA
    DataIntegrityProofWithChallenge:
      type: object
      description: A Data Integrity Proof that includes a challenge and a domain as defined by the W3C VC Data Integrity specification.
      properties:
        type:
          type: string
          description: Data Integrity Proof type.
        cryptosuite:
          type: string
          description: The name of the cryptographic suite.
        created:
          type: string
          description: Date the proof was created.
        challenge:
          type: string
          description: A value chosen by the verifier to mitigate authentication proof replay attacks.
        domain:
          type: string
          description: The domain of the proof to restrict its use to a particular target.
        nonce:
          type: string
          description: A value chosen by the creator of a proof to randomize proof values for privacy purposes.
        verificationMethod:
          type: string
          description: Verification Method used to verify proof.
        proofPurpose:
          type: string
          description: The purpose of the proof to be used with verificationMethod.
        proofValue:
          type: string
          description: Value of the Linked Data proof.
      example:
        type: DataIntegrityProof
        cryptosuite: ecdsa-rdfc-2019
        created: '2024-01-11T19:14:04Z'
        domain: domain.example
        challenge: ce2e12b0-35a0-11f0-85df-7bcb79038e44
        verificationMethod: https://di.example/holder#zDnadqAtcdP6agfXsTWu5darHnbGyTDkKGFYmn8dQraYzCJMZ
        proofPurpose: authentication
        proofValue: zXb23ZkdakfJNUhiTEdwyE598X7RLrkjnXEADLQZ7vZyUGXX8cyJZRBkNw813SGsJHWrcpo4Y8hRJ7adYn35Eetq
    VerifiablePresentation:
      type: object
      description: A JSON-LD Verifiable Presentation with a proof.
      allOf:
        - $ref: '#/components/schemas/Presentation'
        - type: object
          properties:
            proof:
              $ref: '#/components/schemas/DataIntegrityProofWithChallenge'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        holder: did:example:123
        type: VerifiablePresentation
        verifiableCredential:
          - '@context':
              - https://www.w3.org/ns/credentials/v2
              - https://www.w3.org/ns/credentials/examples/v2
          - id: http://example.gov/credentials/3732
          - type:
              - VerifiableCredential
              - UniversityDegreeCredential
          - issuer: did:example:123
          - validFrom: '2020-03-16T22:37:26.544Z'
          - credentialSubject:
              id: did:example:123
              degree:
                type: BachelorDegree
                name: Bachelor of Science and Arts
          - proof:
              type: DataIntegrityProof
              cryptosuite: eddsa-rdfc-2022
              created: '2020-04-02T18:28:08Z'
              verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
              proofPurpose: assertionMethod
              proofValue: zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
        proof:
          type: DataIntegrityProof
          cryptosuite: ecdsa-rdfc-2019
          created: '2020-04-02T18:28:08Z'
          verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
          proofPurpose: assertionMethod
          proofValue: zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
    PresentCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how the DataIntegrityProof is created.
      properties:
        type:
          type: string
          description: The type of the proof. Default 'DataIntegrityProof'.
        cryptosuite:
          type: string
          description: The cryptosuite of the proof.
        verificationMethod:
          type: string
          description: The URI of the verificationMethod used for the proof. If omitted, a default verification method will be used.
        proofPurpose:
          type: string
          description: The purpose of the proof. Default 'assertionMethod'.
        created:
          type: string
          description: The date and time of the proof (with a maximum accuracy in seconds). Default current system time.
        challenge:
          type: string
          description: A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
        domain:
          type: string
          description: The intended domain of validity for the proof. For example website.example
      example:
        type: DataIntegrityProof
        cryptosuite: ecdsa-rdfc-2019
        verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
        proofPurpose: assertionMethod
        created: '2020-04-02T18:48:36Z'
        domain: example.com
        challenge: d436f0c8-fbd9-4e48-bbb2-55fc5d0920a8
    EnvelopedVerifiablePresentation:
      type: object
      description: An object used to express an enveloped verifiable presentation.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the enveloped verifiable presentation.
          items:
            type: string
        id:
          type: string
          description: This MUST be a "data:" scheme URL [RFC2397] that expresses a secured verifiable presentation using an enveloping security scheme.
        type:
          type: string
          description: This MUST be EnvelopedVerifiablePresentation.
      example:
        '@context': https://www.w3.org/ns/credentials/v2
        id: data:application/vp+jwt,eyJraWQiO...zhwGfQ
        type: EnvelopedVerifiablePresentation
    VerifiablePresentationRequest:
      type: object
      description: A Verifiable Presentation Request.
      properties:
        query:
          type: array
          description: A set of one or more queries sent by the requester.
          items:
            type: object
            properties:
              type:
                type: array
                description: The type of the query.
                items:
                  type: string
        challenge:
          type: string
          description: A challenge, intended to prevent replay attacks, provided by the requester that is typically expected to be included in the Verifiable Presentation response.
        domain:
          type: string
          description: A domain, intended to prevent replay attacks, provided by the requester that is typically expected to be included in the Verifiable Presentation response.
          items:
            type: string
        interact:
          type: array
          description: A list of interaction mechanisms that are supported by the server.
          items:
            type: object
            properties:
              service:
                type: object
                description: A service that is supported by the server that is capable of receiving a response to the Verifiable Presentation Request.
                properties:
                  type:
                    type: array
                    description: The type of the service.
                    items:
                      type: string
                  serviceEndpoint:
                    type: string
                    description: A URL that can be utilized for interacting with the service for the purposes of responding to the Verifiable Presentation Request.
      example:
        query:
          - type: DIDAuthentication
          - type: QueryByExample
            credentialQuery:
              reason: We need to see your existing University Degree credential.
              example:
                '@context':
                  - https://www.w3.org/2018/credentials/v1
                  - https://www.w3.org/2018/credentials/examples/v1
                type: UniversityDegreeCredential
        challenge: 3182bdea-63d9-11ea-b6de-3b7c1404d57f
        domain: edu.example
        interact:
          service:
            - type: UnmediatedPresentationService2021
              serviceEndpoint: https://edu.example/workflows/123456/presentations
  parameters:
    ObjectId:
      in: path
      name: id
      required: true
      schema:
        anyOf:
          - type: string
            pattern: "[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}"
          - type: string
            pattern: z[1-9A-HJ-NP-Za-km-z]{21,22}
          - type: string
            pattern: u[a-zA-Z0-9_-]{22,23}
      example:
        - f37e5114-8b4a-11ec-b32e-fbd62b9502c1
        - z4Z1T4HdLdfXCFAhdhzdCqm
        - u7m8_ybOArX-EWeADqWCsIw
    ExchangeId:
      name: exchange-id
      description: A potentially human-readable identifier for an exchange.
      in: path
      required: true
      schema:
        type: string
        minimum: 3
        pattern: '[a-z0-9][a-z0-9\-]{2,}'
