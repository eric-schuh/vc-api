openapi: 3.0.0
info:
  version: 0.0.3-unstable
  title: VC Verifier API
  description: This is an Experimental Open API Specification for the [VC Data Model](https://www.w3.org/TR/vc-data-model/).
  license:
    name: W3C Software and Document License
    url: http://www.w3.org/Consortium/Legal/copyright-software.
  contact:
    name: GitHub Source Code
    url: https://github.com/w3c-ccg/vc-api
servers:
  - url: https://verifier.qa.veres.app/verifiers/z1A45ZhWEGMeibHrB15nv8Gk6
    description: Veres Issuer (Quality Assurance)
paths:
  /credentials/verify:
    post:
      summary: Verifies a verifiableCredential and returns a verificationResult in the response body.
      tags:
        - Credentials
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: verifyCredential
      x-expectedCaller: Verification Coordinator
      description: Verifies a verifiableCredential and returns a verificationResult in the response body.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/VerifyCredentialRequest'
                - $ref: '#/components/schemas/VerifyEnvelopedCredentialRequest'
        description: Parameters for verifying a verifiableCredential.
      responses:
        '200':
          description: Verifiable Credential successfully verified!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
        '400':
          description: invalid input!
  /presentations/verify:
    post:
      summary: Verifies a Presentation and all Verifiable Credentials it contains, returning detailed verification results.
      tags:
        - Presentations
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: verifyPresentation
      x-expectedCaller: Verification Coordinator
      description: |
        Verifies a verifiablePresentation and, by default, all verifiable credentials
        contained within it.

        The verification process includes verifying the presentation's own proof (including domain
        and challenge validation, if provided); verifying each contained verifiable credential's proof, 
        status, and validity period(s); and checking that the holder in the presentation matches the
        verification method used in the presentation's proof.

        Business rule validation (such as verifying that credential subjects match the presentation holder)
        is outside the scope of this verification endpoint and should be performed by the calling application.

        The API is compositional: when credential verification is disabled or limited via 
        implementation-specific options, individual credentials can be verified separately 
        using the <code>/credentials/verify</code> endpoint.

        Given the possibility of denial of service, buffer overflow, or other attacks, an implementation 
        is permitted to apply rate limits or otherwise restrict requests against this API endpoint 
        as needed, using a <code>413</code>, <code>429</code>, or other response error code as appropriate.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/VerifyPresentationRequest'
                - $ref: '#/components/schemas/ProoflessVerifyPresentationRequest'
                - $ref: '#/components/schemas/VerifyEnvelopedPresentationRequest'
        description: Parameters for verifying a verifiablePresentation.
      responses:
        '200':
          description: |

            Verification process completed successfully. The response body contains detailed results 
            indicating whether the presentation and its contained credentials passed or failed verification. 
            A <code>200</code> status indicates the verification process itself succeeded, regardless of whether 
            the presentation and/or credentials were determined to be valid or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-VerificationResult'
        '400':
          description: |
            Invalid or malformed input that prevented the verification process from being performed. 
            This indicates issues with the request format, structure, or parameters, rather than 
            verification failures.
        '413':
          description: Payload too large
        '429':
          description: Request rate limit exceeded.
  /challenges:
    post:
      summary: Passing an empty body to this endpoint creates and returns a challenge string in the response body.
      security:
        - networkAuth: []
        - oAuth2: []
        - zCap: []
      operationId: challenge
      x-expectedCaller: Verification Coordinator
      description: Creates a challenge to be used as `options.challenge` in future requests.
      responses:
        '200':
          description: Challenge created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChallengeResult'
        '400':
          description: Invalid or malformed input
components:
  securitySchemes:
    networkAuth:
      type: http
      scheme: bearer
      bearerFormat: sourceIpAccessRules
    zCap:
      type: http
      scheme: bearer
      bearerFormat: AuthorizationCapability
    didAuth:
      type: http
      scheme: bearer
      bearerFormat: VerifiablePresentation
    oAuth2:
      type: http
      scheme: bearer
      bearerFormat: VcapiOauth2
  schemas:
    VerifyCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/VerifiableCredential'
        options:
          $ref: '#/components/schemas/VerifyCredentialOptions'
    VerifyEnvelopedCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          $ref: '#/components/schemas/EnvelopedVerifiableCredential'
        options:
          $ref: '#/components/schemas/VerifyCredentialOptions'
    VerifyCredentialResponse:
      $ref: '#/components/schemas/VerificationResult'
    VerifyPresentationRequest:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/VerifiablePresentation'
        options:
          $ref: '#/components/schemas/VerifyPresentationOptions'
    VerifyEnvelopedPresentationRequest:
      type: object
      properties:
        verifiablePresentation:
          $ref: '#/components/schemas/EnvelopedVerifiablePresentation'
        options:
          $ref: '#/components/schemas/VerifyPresentationOptions'
    ProoflessVerifyPresentationRequest:
      type: object
      properties:
        presentation:
          $ref: '#/components/schemas/Presentation'
    VerifyPresentationResponse:
      $ref: '#/components/schemas/schemas-VerificationResult'
    CreateChallengeResponse:
      $ref: '#/components/schemas/CreateChallengeResult'
    Issuer:
      type: object
      description: A JSON-LD Verifiable Credential Issuer.
      oneOf:
        - type: string
        - type: object
          properties:
            id:
              type: string
              description: The issuer id.
      example:
        id: did:key:z6MkjRagNiMu91DduvCvgEsqLZDVzrJzFrwahc4tXLt9DoHd
    Credential:
      type: object
      description: A JSON-LD Verifiable Credential without a proof.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the credential.
          items:
            type: string
        id:
          type: string
          description: The ID of the credential. This property MAY be empty. The issuer SHOULD NOT auto-generate the id property if not provided, as a Verifiable Credential does not require the id property to be valid, and there are use cases for which the id property cannot be set.
        type:
          type: array
          description: The JSON-LD type of the credential.
          items:
            type: string
        issuer:
          $ref: '#/components/schemas/Issuer'
        issuanceDate:
          type: string
          description: The issuanceDate
        expirationDate:
          type: string
          description: The expirationDate
        credentialSubject:
          type: object
          description: A REQUIRED property describing the subject of the credential.
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        id: http://example.gov/credentials/3732
        type:
          - VerifiableCredential
          - UniversityDegreeCredential
        issuer: did:example:123
        validFrom: '2020-03-16T22:37:26.544Z'
        credentialSubject:
          id: did:example:123
          degree:
            type: BachelorDegree
            name: Bachelor of Science and Arts
    DataIntegrityProof:
      type: object
      description: A Data Integrity Proof as defined by the W3C VC Data Integrity specification.
      properties:
        type:
          type: string
          description: Data Integrity Proof type.
        cryptosuite:
          type: string
          description: The name of the cryptographic suite.
        created:
          type: string
          description: Date the proof was created.
        nonce:
          type: string
          description: A value chosen by the creator of a proof to randomize proof values for privacy purposes.
        verificationMethod:
          type: string
          description: Verification Method used to verify proof.
        proofPurpose:
          type: string
          description: The purpose of the proof to be used with verificationMethod.
        proofValue:
          type: string
          description: Value of the Linked Data proof.
      example:
        type: DataIntegrityProof
        cryptosuite: ecdsa-rdfc-2019
        created: '2024-01-11T19:14:04Z'
        verificationMethod: https://di.example/issuer#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP
        proofPurpose: assertionMethod
        proofValue: zXb23ZkdakfJNUhiTEdwyE598X7RLrkjnXEADLQZ7vZyUGXX8cyJZRBkNw813SGsJHWrcpo4Y8hRJ7adYn35Eetq
    VerifiableCredential:
      type: object
      description: A JSON-LD Verifiable Credential with a proof.
      allOf:
        - $ref: '#/components/schemas/Credential'
        - type: object
          properties:
            proof:
              $ref: '#/components/schemas/DataIntegrityProof'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        id: http://example.gov/credentials/3732
        type:
          - VerifiableCredential
          - UniversityDegreeCredential
        issuer: did:example:123
        validFrom: '2020-03-16T22:37:26.544Z'
        credentialSubject:
          id: did:example:123
          degree:
            type: BachelorDegree
            name: Bachelor of Science and Arts
        proof:
          type: DataIntegrityProof
          cryptosuite: ecdsa-rdfc-2019
          created: '2020-04-02T18:28:08Z'
          verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
          proofPurpose: assertionMethod
          proofValue: zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
    VerifyCredentialOptions:
      type: object
      additionalProperties: false
      description: Options for specifying how a credential is verified
      properties:
        returnResults:
          type: boolean
          description: Include results for each verification steps taken in the response, such as verifying individual proofs, statuses and schemas.
        returnProblemDetails:
          type: boolean
          description: Include ProblemDetails errors and warnings in the response.
        returnCredential:
          type: boolean
          description: Should the verified credential be returned in the response? If true, then the verified credential should be returned in the form in which it was verified. If false or not provided, then the verified credential should not be returned.
      example:
        returnProblemDetails: true
        returnCredential: true
        returnResults: true
    EnvelopedVerifiableCredential:
      type: object
      description: An object used to associate an enveloped verifiable credential with the verifiableCredential property in a verifiable presentation.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the enveloped verifiable credential.
          items:
            type: string
        id:
          type: string
          description: This MUST be a "data:" scheme URL [RFC2397] that expresses a secured verifiable credential using an enveloping security scheme.
        type:
          type: string
          description: This MUST be EnvelopedVerifiableCredential.
      example:
        '@context': https://www.w3.org/ns/credentials/v2
        id: data:application/vc+sd-jwt;QzVjV...RMjU
        type: EnvelopedVerifiableCredential
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          description: URL identifying the type of problem.
        title:
          type: string
          description: Short but specific human-readable string for the problem.
        detail:
          type: string
          description: Longer human-readable string for the problem.
      example:
        type: https://www.w3.org/TR/vc-data-model#PARSING_ERROR
        title: PARSING_ERROR
        detail: There was an error while parsing input.
    VerificationResult:
      type: object
      additionalProperties: false
      description: Object to report the result of a verification process on a VerifiableCredential.
      properties:
        verified:
          type: boolean
          description: Overall verification assertion of the VerifiableCredential. This is set to <code>true</code> if no errors were detected during the verification process; otherwise, <code>false</code>. See error handling section for more guidance around errors, warnings, and verification steps.
        credential:
          type: object
          description: The VerifiableCredential used as the verification input.
        problemDetails:
          type: array
          description: Array consisting of ProblemDetails objects.
          items:
            $ref: '#/components/schemas/ProblemDetails'
        results:
          type: object
          additionalProperties: false
          description: Verification results to be included as a more verbose output. Keys are mapped to properties from the Verifiable Credential Data Model.
          properties:
            validFrom:
              type: object
              description: Results of verifying the validFrom property, if present in the VerifiableCredential.
              properties:
                verified:
                  type: boolean
                  description: Verification result.
                input:
                  type: string
                  description: The validFrom value.
            validUntil:
              type: object
              description: Results of verifying the validUntil property, if present in the VerifiableCredential.
              properties:
                verified:
                  type: boolean
                  description: Verification result.
                input:
                  type: string
                  description: The validUntil value.
            credentialSchema:
              type: array
              description: Results from verifying the credentialSchema objects if any.
              items:
                type: object
                description: Results from verifying a credentialSchema object.
                properties:
                  verified:
                    type: boolean
                    description: Results of verifying the credentialSchema object.
                  input:
                    type: object
                    description: The credentialSchema object.
            credentialStatus:
              type: array
              description: Results from verifying the credentialStatus objects if any.
              items:
                type: object
                description: Results of verifying a credentialStatus object.
                properties:
                  value:
                    type: integer
                    description: The specific status value associated with the status entry.
                  verified:
                    type: boolean
                    description: Results of verifying the credentialStatus object.
                  input:
                    type: object
                    description: The credentialStatus object.
            proof:
              type: array
              description: Results from verifying the proof objects if any.
              items:
                type: object
                description: Results from verifying a proof object.
                properties:
                  verified:
                    type: boolean
                    description: Results of verifying the proof object.
                  input:
                    type: object
                    description: The proof object.
      example:
        verified: false
        credential: {}
        problemDetails:
          - title: PARSING_ERROR
            type: 'https://www.w3.org/TR/vc-data-model#PARSING_ERROR '
        results:
          validFrom: []
          validUntil: []
          credentialSchema: []
          credentialStatus: []
          proof: []
    Presentation:
      type: object
      description: A JSON-LD Verifiable Presentation without a proof.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the presentation.
          items:
            type: string
        id:
          type: string
          description: The ID of the presentation.
        type:
          type: array
          description: The JSON-LD type of the presentation.
          items:
            type: string
        holder:
          type: object
          description: The holder - will be ignored if no proof is present since there is no proof of authority over the credentials
          nullable: true
        verifiableCredential:
          type: array
          description: The Verifiable Credentials
          items:
            $ref: '#/components/schemas/VerifiableCredential'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        holder: did:example:123
        type: VerifiablePresentation
        verifiableCredential:
          - '@context':
              - https://www.w3.org/ns/credentials/v2
              - https://www.w3.org/ns/credentials/examples/v2
          - id: http://example.gov/credentials/3732
          - type:
              - VerifiableCredential
              - UniversityDegreeCredential
          - issuer: did:example:123
          - validFrom: '2020-03-16T22:37:26.544Z'
          - credentialSubject:
              id: did:example:123
              degree:
                type: BachelorDegree
                name: Bachelor of Science and Arts
          - proof:
              type: DataIntegrityProof
              cryptosuite: ecdsa-rdfc-2019
              created: '2020-04-02T18:28:08Z'
              verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
              proofPurpose: assertionMethod
              proofValue: eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA
    DataIntegrityProofWithChallenge:
      type: object
      description: A Data Integrity Proof that includes a challenge and a domain as defined by the W3C VC Data Integrity specification.
      properties:
        type:
          type: string
          description: Data Integrity Proof type.
        cryptosuite:
          type: string
          description: The name of the cryptographic suite.
        created:
          type: string
          description: Date the proof was created.
        challenge:
          type: string
          description: A value chosen by the verifier to mitigate authentication proof replay attacks.
        domain:
          type: string
          description: The domain of the proof to restrict its use to a particular target.
        nonce:
          type: string
          description: A value chosen by the creator of a proof to randomize proof values for privacy purposes.
        verificationMethod:
          type: string
          description: Verification Method used to verify proof.
        proofPurpose:
          type: string
          description: The purpose of the proof to be used with verificationMethod.
        proofValue:
          type: string
          description: Value of the Linked Data proof.
      example:
        type: DataIntegrityProof
        cryptosuite: ecdsa-rdfc-2019
        created: '2024-01-11T19:14:04Z'
        domain: domain.example
        challenge: ce2e12b0-35a0-11f0-85df-7bcb79038e44
        verificationMethod: https://di.example/holder#zDnadqAtcdP6agfXsTWu5darHnbGyTDkKGFYmn8dQraYzCJMZ
        proofPurpose: authentication
        proofValue: zXb23ZkdakfJNUhiTEdwyE598X7RLrkjnXEADLQZ7vZyUGXX8cyJZRBkNw813SGsJHWrcpo4Y8hRJ7adYn35Eetq
    VerifiablePresentation:
      type: object
      description: A JSON-LD Verifiable Presentation with a proof.
      allOf:
        - $ref: '#/components/schemas/Presentation'
        - type: object
          properties:
            proof:
              $ref: '#/components/schemas/DataIntegrityProofWithChallenge'
      example:
        '@context':
          - https://www.w3.org/ns/credentials/v2
          - https://www.w3.org/ns/credentials/examples/v2
        holder: did:example:123
        type: VerifiablePresentation
        verifiableCredential:
          - '@context':
              - https://www.w3.org/ns/credentials/v2
              - https://www.w3.org/ns/credentials/examples/v2
          - id: http://example.gov/credentials/3732
          - type:
              - VerifiableCredential
              - UniversityDegreeCredential
          - issuer: did:example:123
          - validFrom: '2020-03-16T22:37:26.544Z'
          - credentialSubject:
              id: did:example:123
              degree:
                type: BachelorDegree
                name: Bachelor of Science and Arts
          - proof:
              type: DataIntegrityProof
              cryptosuite: eddsa-rdfc-2022
              created: '2020-04-02T18:28:08Z'
              verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
              proofPurpose: assertionMethod
              proofValue: zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
        proof:
          type: DataIntegrityProof
          cryptosuite: ecdsa-rdfc-2019
          created: '2020-04-02T18:28:08Z'
          verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
          proofPurpose: assertionMethod
          proofValue: zaHXrr7AQdydBk3ahpCDpWbxfLokDqmCToYm2dyWvpcFVyWooC2he63w1f7UNQoAMKdhaRtcnaE2KTo5o5vTCcfw
    VerifyPresentationOptions:
      type: object
      additionalProperties: true
      description: |-
        Options for specifying how a presentation is verified.
        Implementations MAY extend this object with additional properties to control verification behavior. Common extensions may include options to disable verification of contained credentials (e.g., for debugging or when only presentation-level verification is needed); fine-grained controls for verification of credential aspects such as status checks, validity period validation, proof verification, and schema validation; and selective verification controls for specific credentials within the presentation.
        The API is compositional when credential verification is disabled or limited; indvidual credentials can be verified separately using the /credentials/verify endpoint.
      properties:
        challenge:
          type: string
          description: A challenge provided by the requesting party of the proof; for example, <code>6e62f66e-67de-11eb-b490-ef3eeefa55f2</code>.
        domain:
          type: string
          description: The intended domain of validity for the proof; for example, <code>website.example</code>.
        returnPresentation:
          type: boolean
          description: Whether or not to return the verified presentation. If true, then the verified presentation MUST be returned. If false or not provided, then the verified presentation MUST NOT be returned.
      example:
        domain: example.com
        challenge: d436f0c8-fbd9-4e48-bbb2-55fc5d0920a8
        returnPresentation: true
    EnvelopedVerifiablePresentation:
      type: object
      description: An object used to express an enveloped verifiable presentation.
      properties:
        '@context':
          type: array
          description: The JSON-LD context of the enveloped verifiable presentation.
          items:
            type: string
        id:
          type: string
          description: This MUST be a "data:" scheme URL [RFC2397] that expresses a secured verifiable presentation using an enveloping security scheme.
        type:
          type: string
          description: This MUST be EnvelopedVerifiablePresentation.
      example:
        '@context': https://www.w3.org/ns/credentials/v2
        id: data:application/vp+jwt,eyJraWQiO...zhwGfQ
        type: EnvelopedVerifiablePresentation
    schemas-VerificationResult:
      type: object
      additionalProperties: false
      description: Object to report the result of a verification process on a VerifiablePresentation.
      properties:
        verified:
          type: boolean
          description: Overall verification assertion of the VerifiablePresentation. This is set to <code>true</code> if the VerifiablePresentation and all checked VerifiableCredentials passed verification; otherwise, <code>false</code>. See error handling section for more guidance around errors and warnings, and validation and verification steps.
        verifiablePresentation:
          type: object
          description: The VerifiablePresentation used as the verification input.
        problemDetails:
          type: array
          description: Array consisting of ProblemDetails objects for overall presentation-level issues.
          items:
            $ref: '#/components/schemas/ProblemDetails'
        results:
          type: object
          additionalProperties: false
          description: Detailed verification results for both VerifiablePresentation and all VerifiableCredentials contained within it, by default. Keys are mapped to properties from the Verifiable Credential Data Model which are subject to validations.
          properties:
            presentation:
              type: object
              additionalProperties: false
              description: Verification results specific to the VerifiablePresentation itself (not its contained VerifiableCredentials).
              properties:
                challenge:
                  type: object
                  description: If provided in the verification options, the result of verifying the security challenge across all proofs provided.
                  properties:
                    verified:
                      type: boolean
                      description: Result of verifying the security challenge across all proofs provided.
                    input:
                      type: string
                      description: The challenge input string.
                domain:
                  type: object
                  description: If provided in the verification options, the result of verifying the security domain across all proofs provided.
                  properties:
                    verified:
                      type: boolean
                      description: Result of verifying the security domain across all proofs provided.
                    input:
                      type: string
                      description: The security domain input string.
                holder:
                  type: object
                  description: Result from verifying the holder, if any.
                  properties:
                    verified:
                      type: boolean
                      description: Result of verifying the holder.
                    input:
                      type: string
                      description: The holder input string.
                proof:
                  type: array
                  description: Results from verifying the proof objects if any.
                  items:
                    type: object
                    description: Results from verifying a proof object.
                    properties:
                      verified:
                        type: boolean
                        description: Results of verifying the proof object.
                      input:
                        type: object
                        description: The proof object.
                      problemDetails:
                        type: array
                        description: Issues sepecific to this proof.
                        items:
                          $ref: '#/components/schemas/ProblemDetails'
            credentials:
              type: array
              description: Detailed verification results for each VerifiableCredential in the VerifiablePresentation.
              items:
                $ref: '#/components/schemas/VerificationResult'
      example:
        verified: false
        verifiablePresentation: {}
        problemDetails:
          - type: https://www.w3.org/TR/vc-data-model-2.0/#PARSING_ERROR
            title: Parsing error
            description: 'There was a parsing error on line 32, column 5: A comma was expected after the " character.'
        results:
          presentation:
            challenge:
              valid: true
              input: d436f0c8-fbd9-4e48-bbb2-55fc5d0920a8
            domain:
              valid: true
              input: example.com
            holder:
              valid: true
              input: did:example:123
            proof:
              - valid: true
                input:
                  type: DataIntegrityProof
                  cryptosuite: eddsa-rdfc-2022
                  created: '2020-04-02T18:28:08Z'
                  verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
                  proofPurpose: authentication
                  proofValue: z5h8W7qJkNrhGjJHWxZ8oN5h8gYZ4h8x7h5b8k2dqKwJ5J8j7h5k8m3qKvJ2j7qJ5h8gYZ4h8x7h5b8k2dqKwJ5J8j7h5k8m3qKvJ2j7qJ5h8gYZ4h8x
                problemDetails: []
          credentials:
            - verified: true
              credential:
                '@context':
                  - https://www.w3.org/ns/credentials/v2
                  - https://www.w3.org/ns/credentials/examples/v2
                id: http://example.gov/credentials/3732
                type:
                  - VerifiableCredential
                  - DriverLicense
                issuer: did:example:dmv456
                validFrom: '2023-01-01T00:00:00Z'
                validUntil: '2027-01-01T00:00:00Z'
                credentialSubject:
                  id: did:example:alice123
                  licenseNumber: DL123456789
              problemDetails: []
              results:
                validFrom:
                  valid: true
                  input: '2023-01-01T00:00:00Z'
                validUntil:
                  valid: true
                  input: '2027-01-01T00:00:00Z'
                credentialStatus:
                  - value: 0
                    valid: true
                    input:
                      id: https://example.com/status/3#94567
                      type: BitstringStatusListEntry
                      statusPurpose: revocation
                      statusListIndex: '94567'
                      statusListCredential: https://example.com/status/3
                proof:
                  - valid: true
                    input:
                      type: DataIntegrityProof
                      cryptosuite: eddsa-rdfc-2022
                      created: '2023-01-01T10:00:00Z'
                      verificationMethod: did:example:dmv456#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
                      proofPurpose: assertionMethod
                      proofValue: z3dY5z8x7h5b8k2dqKwJ5J8j7h5k8m3qKvJ2j7qJ5h8gYZ4h8x7h5b8k2dqKwJ5J8j7h5k8m3qKvJ2j7qJ5h8gYZ4h8x7h5b8k2dqKwJ5J8j7h5k8m3qKvJ2j7qJ
                    problemDetails: []
            - verified: false
              credential:
                '@context':
                  - https://www.w3.org/ns/credentials/v2
                  - https://www.w3.org/ns/credentials/examples/v2
                id: http://example.gov/credentials/3733
                type:
                  - VerifiableCredential
                  - UniversityDegree
                issuer: did:example:university789
                validFrom: '2020-01-01T00:00:00Z'
                validUntil: '2022-12-31T23:59:59Z'
                credentialSubject:
                  id: did:example:alice123
                  degree:
                    type: BachelorDegree
                    name: Bachelor of Science
              problemDetails:
                - type: https://www.w3.org/TR/vc-data-model-2.0#CREDENTIAL_EXPIRED
                  title: Credential expired
                  detail: The credential's validUntil date of '2022-12-31T23:59:59Z' has passed.
              results:
                validFrom:
                  valid: true
                  input: '2020-01-01T00:00:00Z'
                validUntil:
                  valid: false
                  input: '2022-12-31T23:59:59Z'
                credentialStatus:
                  - value: 0
                    valid: true
                    input:
                      id: https://example.com/status/4#12345
                      type: BitstringStatusListEntry
                      statusPurpose: revocation
                      statusListIndex: '12345'
                      statusListCredential: https://example.com/status/4
                proof:
                  - valid: true
                    input:
                      type: DataIntegrityProof
                      cryptosuite: eddsa-rdfc-2022
                      created: '2020-01-01T10:00:00Z'
                      verificationMethod: did:example:university789#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
                      proofPurpose: assertionMethod
                      proofValue: z8m9N4p5q6r7s8t9u0v1w2x3y4z5a6b7c8d9e0f1g2h3i4j5k6l7m8n9o0p1q2r3s4t5u6v7w8x9y0z1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v
                    problemDetails: []
    CreateChallengeResult:
      type: object
      additionalProperties: false
      description: Object containg a challenge
      properties:
        challenge:
          type: string
          description: The challenge value
